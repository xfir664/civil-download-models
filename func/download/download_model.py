import os
import requests
from urllib.parse import urlparse
from func.set_new_error import set_new_error

def download_model(driver, download_btn, download_path):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ requests, –∏—Å–ø–æ–ª—å–∑—É—è –∫—É–∫–∏ –∏–∑ Selenium.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∫–æ–Ω—Å–æ–ª–∏.
    """
    href = download_btn.get_attribute("href")
    
    # –°–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é —Å –∫—É–∫–∞–º–∏ –∏–∑ Selenium
    session = requests.Session()
    for cookie in driver.get_cookies():
        session.cookies.set(cookie['name'], cookie['value'])

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    filename = "model.safetensors"
    path = urlparse(href).path
    if path:
        filename = os.path.basename(path) or filename
    if not filename.endswith(('.safetensors', '.ckpt', '.pt', '.bin')):
        filename += ".safetensors"

    file_path = os.path.join(download_path, filename)

    if os.path.isfile(file_path):
        print(f"‚úÖ –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
        return True

    try:
        print(f"üì• –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: {filename}")
        response = session.get(href, stream=True, allow_redirects=True)

        if response.status_code == 403:
            print("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –º–æ–¥–µ–ª—å —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
            return False
        elif response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text[:200]}")
            return False

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        new_filename = filename
        if "Content-Disposition" in response.headers:
            content_disp = response.headers["Content-Disposition"]
            if "filename*" in content_disp:
                new_filename = content_disp.split("filename*=")[1].split("'")[-1]
            elif "filename" in content_disp:
                new_filename = content_disp.split("filename=")[1].strip('"').strip()
            if new_filename != filename:
                file_path = os.path.join(download_path, new_filename)

        if os.path.isfile(file_path):
            print(f"‚úÖ –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–ø–æ—Å–ª–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞): {file_path}")
            return True

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        total_size = int(response.headers.get("content-length", 0))
        block_size = 8192
        downloaded = 0

        with open(file_path, "wb") as f:
            for chunk in response.iter_content(chunk_size=block_size):
                if chunk:
                    f.write(chunk)
                    downloaded += len(chunk)

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    if total_size > 0:
                        percent = (downloaded / total_size) * 100
                        print(f"\r    ‚è≥ {downloaded / 1024 / 1024:.1f} MB / {total_size / 1024 / 1024:.1f} MB ({percent:.1f}%)", end="", flush=True)
                    else:
                        print(f"\r    ‚è≥ –°–∫–∞—á–∞–Ω–æ: {downloaded / 1024 / 1024:.1f} MB", end="", flush=True)

        print()  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ")
        return True

    except Exception as e:
        set_new_error({
            "error_message": f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏:",
            "error_data": str(e),
            "error_type": "download_model",
        })
        return False